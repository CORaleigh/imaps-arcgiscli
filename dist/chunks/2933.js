(self.webpackChunkimaps=self.webpackChunkimaps||[]).push([[2933],{62933:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>P});var i=r(56140),s=(r(95830),r(59472)),a=(r(36544),r(68055)),o=r(79881),l=r(30590),n=r(87566),p=r(60538),u=r(32656),y=(r(10923),r(57002),r(9678)),c=(r(86035),r(39105)),h=r(52937),d=r(54721),m=r(1721),g=r(56700),b=r(87864),v=r(43072),f=r(18152),x=r(78910),S=r(48899),w=r(57407),_=r(63795),C=r(33716),O=r(2194),M=r(10113),q=r(2584),I=r(77204),j=r(66002),E=r(5698),N=r(41452),R=r(24681),J=r(49708),L=r(11555);let F=class extends((0,w.h)((0,q.n)((0,M.M)((0,O.Q)((0,J.x)((0,E.O)((0,S.Y)((0,x.q)((0,C.I)((0,v.R)((0,_.N)((0,I.p)(g.Z))))))))))))){constructor(...e){super(...e),this.alwaysRefetch=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.labelsVisible=!1,this.isReference=null,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=(0,s.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).then((()=>this._fetchService(t)),(()=>this._fetchService(t)))),(0,c.resolve)(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,t,r,i){if(!this.loaded||!e)return;const s=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=(0,y.M9)(i.origin);if(3===e){const e=this.createSublayersForOrigin("service").sublayers;a=(0,R.QV)(s,e,2)}else if(e>3){const e=this.createSublayersForOrigin("portal-item");a=(0,R.QV)(s,e.sublayers,(0,y.M9)(e.origin))}}const o=[],l={writeSublayerStructure:a,...i};let n=a;s.forEach((e=>{const t=e.write({},l);o.push(t),n=n||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(t.layers=o),n&&(t.visibleLayers=s.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,i){const s=i&&i.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new L.R({layer:this,scale:(0,j.yZ)({extent:e,width:t})*s}),o=a.toJSON();a.destroy();const l=!i||!i.rotation||this.version<10.3?{}:{rotation:-i.rotation},n=e&&e.spatialReference,p=n.wkid||JSON.stringify(n.toJSON());o.dpi*=s;const u={};if(null!=i&&i.timeExtent){const{start:e,end:t}=i.timeExtent.toJSON();u.time=e&&t&&e===t?""+e:`${null==e?"null":e},${null==t?"null":t}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(u.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:t+","+r,...o,...l,...u}}async fetchImage(e,t,r,i){const s={responseType:"image"};i&&i.timestamp&&(s.query={...s.query,_ts:i.timestamp}),i&&i.signal&&(s.signal=i.signal),this.customParameters&&Object.keys(this.customParameters).length&&(s.query={...this.customParameters,...s.query});const a=this.parsedUrl.path+"/export",o={...this.parsedUrl.query,...this.createExportImageParameters(e,t,r,i),f:"image",_ts:this.alwaysRefetch?Date.now():null};return null==o.dynamicLayers||this.capabilities.exportMap.supportsDynamicLayers?(s.query?s.query={...o,...s.query}:s.query=o,(0,d.default)(a,s).then((e=>e.data)).catch((e=>{if((0,c.isAbortError)(e))throw e;throw new u.Z("mapimagelayer:image-fetch-error",`Unable to load image: ${a}`,{error:e})}))):(0,c.reject)(new u.Z("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o}))}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json"}},{data:r}=await(0,d.default)(this.url,t),{extent:i,fullExtent:s,timeExtent:a}=r,o=i||s;return{fullExtent:o&&h.Z.fromJSON(o),timeExtent:a&&b.Z.fromJSON({start:a[0],end:a[1]})}}loadAll(){return(0,m.GZ)(this,(e=>{e(this.allSublayers)}))}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await(0,d.default)(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};(0,i._)([(0,o.Cb)()],F.prototype,"alwaysRefetch",void 0),(0,i._)([(0,o.Cb)()],F.prototype,"dpi",void 0),(0,i._)([(0,o.Cb)()],F.prototype,"gdbVersion",void 0),(0,i._)([(0,o.Cb)({json:{read:!1,write:!1}})],F.prototype,"popupEnabled",void 0),(0,i._)([(0,o.Cb)()],F.prototype,"imageFormat",void 0),(0,i._)([(0,l.r)("imageFormat",["supportedImageFormatTypes"])],F.prototype,"readImageFormat",null),(0,i._)([(0,o.Cb)({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],F.prototype,"imageMaxHeight",void 0),(0,i._)([(0,o.Cb)({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],F.prototype,"imageMaxWidth",void 0),(0,i._)([(0,o.Cb)()],F.prototype,"imageTransparency",void 0),(0,i._)([(0,o.Cb)({json:{read:!1,write:!1}})],F.prototype,"labelsVisible",void 0),(0,i._)([(0,o.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],F.prototype,"isReference",void 0),(0,i._)([(0,o.Cb)({type:["ArcGISMapServiceLayer"]})],F.prototype,"operationalLayerType",void 0),(0,i._)([(0,o.Cb)()],F.prototype,"sourceJSON",void 0),(0,i._)([(0,o.Cb)({json:{write:{ignoreOrigin:!0}}})],F.prototype,"sublayers",void 0),(0,i._)([(0,p.c)("sublayers",{layers:{type:[N.Z]},visibleLayers:{type:[a.z8]}})],F.prototype,"writeSublayers",null),(0,i._)([(0,o.Cb)({type:["show","hide","hide-children"]})],F.prototype,"listMode",void 0),(0,i._)([(0,o.Cb)({json:{read:!1},readOnly:!0,value:"map-image"})],F.prototype,"type",void 0),(0,i._)([(0,o.Cb)(f.HQ)],F.prototype,"url",void 0),F=(0,i._)([(0,n.j)("esri.layers.MapImageLayer")],F);const P=F}}]);
//# sourceMappingURL=2933.js.map