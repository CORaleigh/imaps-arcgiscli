(self.webpackChunkimaps=self.webpackChunkimaps||[]).push([[4464],{42766:(t,e,i)=>{"use strict";i.d(e,{Z:()=>m});var s,n=i(56140),l=(i(95830),i(82550)),r=i(59472),a=i(36544),o=i(79881),h=i(60263),f=i(87566),p=i(32656),u=(i(10923),i(57002),i(86035),i(58385));const c=a.Z.getLogger("esri.layers.support.PixelBlock");let x=s=class extends u.wq{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.pixels=null,this.statistics=null}static createEmptyBand(t,e){return new(s.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"u32":e=Uint32Array;break;case"f32":e=Float32Array;break;case"f64":e=Float64Array;break;case"c64":case"c128":case"unknown":e=Float32Array}return e}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].indexOf(e)>-1?e="u8":-1===["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].indexOf(e)&&(e="f32"),e}getPlaneCount(){return this.pixels&&this.pixels.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new p.Z("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics||{minValue:null,maxValue:null})}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if(t)for(let i=0;i<t.length;i++)t[i]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38]}const[i,n]=e,l=this.pixels,r=this.width*this.height,a=l.length;let o,h,f;const p=[];for(let e=0;e<a;e++){f=s.createEmptyBand(t,r),o=l[e];for(let t=0;t<r;t++)h=o[t],f[t]=h>n?n:h<i?i:h;p.push(f)}this.pixels=p,this.pixelType=t}extractBands(t){if((0,r.Wi)(t)||0===t.length||null==this.pixels||0===this.pixels.length)return this;const e=this.pixels.length,i=t.some((t=>t>=this.pixels.length)),n=e===t.length&&!t.some(((t,e)=>t!==e));return i||n?this:new s({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>this.pixels[t])),statistics:this.statistics&&t.map((t=>this.statistics[t]))})}clone(){const t=new s({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;this.mask&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const i=s.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const s=this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=s?this.pixels[e].slice(0,this.pixels[e].length):new i(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=(0,l.d9)(this.statistics[e]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:i,pixels:s}=this;if(!t||!s||!s.length)return void c.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let n,l,r,a;n=l=r=s[0],s.length>=3?(l=s[1],r=s[2]):2===s.length&&(l=s[1]);const o=new Uint32Array(t),h=this.width*this.height;if(n.length===h)if(e&&e.length===h)if(i)for(a=0;a<h;a++)e[a]&&(o[a]=e[a]<<24|r[a]<<16|l[a]<<8|n[a]);else for(a=0;a<h;a++)e[a]&&(o[a]=255<<24|r[a]<<16|l[a]<<8|n[a]);else for(a=0;a<h;a++)o[a]=255<<24|r[a]<<16|l[a]<<8|n[a];else c.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:i,statistics:s}=this;if(!t||!e||!e.length)return void c.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const n=this.pixelType;let l=1,r=0,a=1;if(s&&s.length>0)r=s.map((t=>t.minValue)).reduce(((t,e)=>Math.min(t,e))),a=s.map((t=>t.maxValue-t.minValue)).reduce(((t,e)=>Math.max(t,e))),l=255/a;else{let t=255;"s8"===n?(r=-128,t=127):"u16"===n?t=65535:"s16"===n?(r=-32768,t=32767):"u32"===n?t=4294967295:"s32"===n?(r=-2147483648,t=2147483647):"f32"===n?(r=-34e38,t=34e38):"f64"===n&&(r=-Number.MAX_VALUE,t=Number.MAX_VALUE),l=255/(t-r)}const o=new Uint32Array(t),h=this.width*this.height;let f,p,u,x,m;if(f=p=u=e[0],f.length!==h)return c.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(p=e[1],e.length>=3&&(u=e[2]),i&&i.length===h)for(x=0;x<h;x++)i[x]&&(o[x]=255<<24|(u[x]-r)*l<<16|(p[x]-r)*l<<8|(f[x]-r)*l);else for(x=0;x<h;x++)o[x]=255<<24|(u[x]-r)*l<<16|(p[x]-r)*l<<8|(f[x]-r)*l;else if(i&&i.length===h)for(x=0;x<h;x++)m=(f[x]-r)*l,i[x]&&(o[x]=255<<24|m<<16|m<<8|m);else for(x=0;x<h;x++)m=(f[x]-r)*l,o[x]=255<<24|m<<16|m<<8|m}_fillFrom32Bit(t){const{pixels:e,mask:i}=this;if(!t||!e||!e.length)return c.error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let s,n,l,r;s=n=l=e[0],e.length>=3?(n=e[1],l=e[2]):2===e.length&&(n=e[1]);const a=this.width*this.height;if(s.length!==a)return c.error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let o=0;if(i&&i.length===a)for(r=0;r<a;r++)t[o++]=s[r],t[o++]=n[r],t[o++]=l[r],t[o++]=1&i[r];else for(r=0;r<a;r++)t[o++]=s[r],t[o++]=n[r],t[o++]=l[r],t[o++]=1}_calculateBandStatistics(t,e){let i=1/0,s=-1/0;const n=t.length;let l,r=0;if(e)for(l=0;l<n;l++)e[l]&&(r=t[l],i=r<i?r:i,s=r>s?r:s);else for(l=0;l<n;l++)r=t[l],i=r<i?r:i,s=r>s?r:s;return{minValue:i,maxValue:s}}};(0,n._)([(0,o.Cb)({json:{write:!0}})],x.prototype,"width",void 0),(0,n._)([(0,o.Cb)({json:{write:!0}})],x.prototype,"height",void 0),(0,n._)([(0,o.Cb)({json:{write:!0}})],x.prototype,"pixelType",void 0),(0,n._)([(0,h.p)("pixelType")],x.prototype,"castPixelType",null),(0,n._)([(0,o.Cb)({json:{write:!0}})],x.prototype,"validPixelCount",void 0),(0,n._)([(0,o.Cb)({json:{write:!0}})],x.prototype,"mask",void 0),(0,n._)([(0,o.Cb)({json:{write:!0}})],x.prototype,"maskIsAlpha",void 0),(0,n._)([(0,o.Cb)({json:{write:!0}})],x.prototype,"pixels",void 0),(0,n._)([(0,o.Cb)({json:{write:!0}})],x.prototype,"statistics",void 0),x=s=(0,n._)([(0,f.j)("esri.layers.support.PixelBlock")],x);const m=x},44464:(t,e,i)=>{"use strict";i.d(e,{Uk:()=>C,SJ:()=>a,Pz:()=>r,hE:()=>f,Oh:()=>h,Hv:()=>o,qF:()=>l,XV:()=>u,us:()=>d,Kh:()=>m,zp:()=>c,pW:()=>g,Vl:()=>v,dy:()=>p});var s=i(42766);const n=function(t){return t&&"esri.layers.support.PixelBlock"===t.declaredClass&&t.pixels&&t.pixels.length>0};function l(t,e){if(!e||!n(t))return t;const i=t.pixels.length;return e&&e.some((t=>t>=i))||1===i&&1===e.length&&0===e[0]?t:i!==e.length||e.some(((t,e)=>t!==e))?new s.Z({pixelType:t.pixelType,width:t.width,height:t.height,mask:t.mask,validPixelCount:t.validPixelCount,maskIsAlpha:t.maskIsAlpha,pixels:e.map((e=>t.pixels[e])),statistics:t.statistics&&e.map((e=>t.statistics[e]))}):t}function r(t){if(!t)return;const e=t.colormap;if(!e||0===e.length)return;const i=e.sort(((t,e)=>t[0]-e[0]));let s=0;i[0][0]<0&&(s=i[0][0]);const n=Math.max(256,i[i.length-1][0]-s+1),l=new Uint8Array(4*n),r=[];let a,o=0,h=0;const f=5===i[0].length;if(n>65536)return i.forEach((t=>{r[t[0]-s]=f?t.slice(1):t.slice(1).concat([255])})),{indexed2DColormap:r,offset:s,alphaSpecified:f};if(t.fillUnspecified)for(a=i[h],o=a[0]-s;o<n;o++)l[4*o]=a[1],l[4*o+1]=a[2],l[4*o+2]=a[3],l[4*o+3]=f?a[4]:255,o===a[0]-s&&(a=h===i.length-1?a:i[++h]);else for(o=0;o<i.length;o++)a=i[o],h=4*(a[0]-s),l[h]=a[1],l[h+1]=a[2],l[h+2]=a[3],l[h+3]=f?a[4]:255;return{indexedColormap:l,offset:s,alphaSpecified:f}}function a(t,e){if(!n(t))return t;if(!e&&(e.indexedColormap||e.indexed2DColormap))return t;const i=t.clone(),s=i.pixels;let l=i.mask;const r=i.width*i.height;if(1!==s.length)return t;const{indexedColormap:a,indexed2DColormap:o,offset:h,alphaSpecified:f}=e,p=a.length-1;let u=0;const c=s[0],x=new Uint8Array(c.length),m=new Uint8Array(c.length),d=new Uint8Array(c.length);let g,y=0;if(a)if(l)for(u=0;u<r;u++)l[u]&&(y=4*(c[u]-h),y<h||y>p?l[u]=0:(x[u]=a[y],m[u]=a[y+1],d[u]=a[y+2],l[u]=a[y+3]));else{for(l=new Uint8Array(r),u=0;u<r;u++)y=4*(c[u]-h),y<h||y>p?l[u]=0:(x[u]=a[y],m[u]=a[y+1],d[u]=a[y+2],l[u]=a[y+3]);i.mask=l}else if(l)for(u=0;u<r;u++)l[u]&&(g=o[c[u]],x[u]=g[0],m[u]=g[1],d[u]=g[2],l[u]=g[3]);else{for(l=new Uint8Array(r),u=0;u<r;u++)g=o[c[u]],x[u]=g[0],m[u]=g[1],d[u]=g[2],l[u]=g[3];i.mask=l}return i.pixels=[x,m,d],i.statistics=null,i.pixelType="u8",i.maskIsAlpha=f,i}function o(t){if(!n(t))return null;t.statistics||t.updateStatistics();const{pixels:e,mask:i,pixelType:s,statistics:l}=t,r=t.width*t.height,a=e.length;let o,h,f,p,u;const c=[],x=[];let m,d,g,y,w,k,A,M,b,v;const C=256;for(p=0;p<a;p++){if(m=new Uint32Array(C),g=e[p],"u8"===s)if(o=-.5,h=255.5,i)for(u=0;u<r;u++)i[u]&&m[g[u]]++;else for(u=0;u<r;u++)m[g[u]]++;else{if(o=l[p].minValue,h=l[p].maxValue,f=(h-o)/C,d=new Uint32Array(257),i)for(u=0;u<r;u++)i[u]&&d[Math.floor((g[u]-o)/f)]++;else for(u=0;u<r;u++)d[Math.floor((g[u]-o)/f)]++;for(u=0;u<255;u++)m[u]=d[u];m[255]=d[255]+d[256]}for(c.push({min:o,max:h,size:C,counts:m}),y=0,w=0,M=0,u=0;u<C;u++)y+=m[u],w+=u*m[u];for(b=w/y,u=0;u<C;u++)M+=m[u]*Math.pow(u-b,2);v=Math.sqrt(M/(y-1)),f=(h-o)/C,k=(b+.5)*f+o,A=v*f,x.push({min:o,max:h,avg:k,stddev:A})}return{statistics:x,histograms:c}}function h(t){const e=[];for(let i=0;i<t.length;i++){const{min:s,max:n,size:l,counts:r}=t[i];let a=0,o=0;for(let t=0;t<l;t++)a+=r[t],o+=t*r[t];const h=o/a;let f=0;for(let t=0;t<l;t++)f+=r[t]*Math.pow(t-h,2);const p=(n-s)/l,u=(h+.5)*p+s,c=Math.sqrt(f/(a-1))*p;e.push({min:s,max:n,avg:u,stddev:c})}return e}function f(t){const{minCutOff:e,maxCutOff:i,gamma:s,pixelType:n}=t,l=t.outMin||0,r=t.outMax||255;if(-1===["u8","u16","s8","s16"].indexOf(n))return null;const a=e.length;let o,h,f=0;"s8"===n?f=-127:"s16"===n&&(f=-32767);let p=256;["u16","s16"].indexOf(n)>-1&&(p=65536);const u=[],c=[],x=r-l;for(o=0;o<a;o++)c[o]=i[o]-e[o],u[o]=x/(i[o]-e[o]);const m=s&&s.length>=a,d=[];if(m)for(o=0;o<a;o++)s[o]>1?s[o]>2?d[o]=6.5+Math.pow(s[o]-2,2.5):d[o]=6.5+100*Math.pow(2-s[o],4):d[o]=1;let g;const y=[];let w,k,A;if(m)for(o=0;o<a;o++){for(A=[],h=0;h<p;h++)w=h+f,g=(w-e[o])/c[o],k=1,s[o]>1&&(k-=Math.pow(1/x,g*d[o])),w<i[o]&&w>e[o]?A[h]=Math.floor(k*x*Math.pow(g,1/s[o]))+l:w>=i[o]?A[h]=r:A[h]=l;y[o]=A}else for(o=0;o<a;o++){for(A=[],h=0;h<p;h++)w=h+f,w<=e[o]?A[h]=l:w>=i[o]?A[h]=r:A[h]=Math.floor((w-e[o])/c[o]*x)+l;y[o]=A}if(null!=t.contrastOffset){const e=function(t,e){const i=Math.min(Math.max(t,-100),100),s=Math.min(Math.max(e,-100),100),n=255;let l,r;const a=new Uint8Array(256);for(l=0;l<256;l++)i>0&&i<100?r=(200*l-25500+510*s)/(2*(100-i))+128:i<=0&&i>-100?r=(200*l-25500+510*s)*(100+i)/2e4+128:100===i?(r=200*l-25500+256*(100-i)+510*s,r=r>0?n:0):-100===i&&(r=128),a[l]=r>n?n:r<0?0:r;return a}(t.contrastOffset,t.brightnessOffset);for(o=0;o<a;o++)for(A=y[o],h=0;h<p;h++)A[h]=e[A[h]]}return{lut:y,offset:f}}function p(t,e){if(!n(t))return null;const i=t.clone(),{pixels:s,mask:l}=i,{minCutOff:r,maxCutOff:a,gamma:o}=e,h=e.outMin||0,f=e.outMax||255,p=i.width*i.height,u=s.length;let c,x,m,d,g;const y=f-h,w=[],k=[];for(c=0;c<u;c++)k[c]=a[c]-r[c],w[c]=y/(a[c]-r[c]);const A=o&&o.length>=u,M=[];if(A)for(c=0;c<u;c++)o[c]>1?o[c]>2?M[c]=6.5+Math.pow(o[c]-2,2.5):M[c]=6.5+100*Math.pow(2-o[c],4):M[c]=1;if(A)if(null!=l){for(x=0;x<p;x++)if(l[x])for(c=0;c<u;c++)m=s[c][x],g=(m-r[c])/k[c],d=1,o[c]>1&&(d-=Math.pow(1/y,g*M[c])),m<a[c]&&m>r[c]?s[c][x]=Math.floor(d*y*Math.pow(g,1/o[c]))+h:m>=a[c]?s[c][x]=f:s[c][x]=h}else for(x=0;x<p;x++)for(c=0;c<u;c++)m=s[c][x],g=(m-r[c])/k[c],d=1,o[c]>1&&(d-=Math.pow(1/y,g*M[c])),m<a[c]&&m>r[c]?s[c][x]=Math.floor(d*y*Math.pow(g,1/o[c]))+h:m>=a[c]?s[c][x]=f:s[c][x]=h;else if(null!=l){for(x=0;x<p;x++)if(l[x])for(c=0;c<u;c++)m=s[c][x],m<a[c]&&m>r[c]?s[c][x]=Math.floor((m-r[c])/k[c]*y)+h:m>=a[c]?s[c][x]=f:s[c][x]=h}else for(x=0;x<p;x++)for(c=0;c<u;c++)m=s[c][x],m<a[c]&&m>r[c]?s[c][x]=Math.floor((m-r[c])/k[c]*y)+h:m>=a[c]?s[c][x]=f:s[c][x]=h;return i.pixelType="u8",i.updateStatistics(),i}function u(t,e){if(!n(t))return null;const{pixels:i,mask:l}=t,r=t.width*t.height,a=i.length;let o=e.lut;const{offset:h}=e;let f,p;o&&1===o[0].length&&(o=i.map((()=>o)));const u=[];let c,x,m;if(h)if(null==l)for(f=0;f<a;f++){for(c=i[f],x=o[f],m=new Uint8Array(r),p=0;p<r;p++)m[p]=x[c[p]-h];u.push(m)}else for(f=0;f<a;f++){for(c=i[f],x=o[f],m=new Uint8Array(r),p=0;p<r;p++)l[p]&&(m[p]=x[c[p]-h]);u.push(m)}else if(null==l)for(f=0;f<a;f++){for(c=i[f],x=o[f],m=new Uint8Array(r),p=0;p<r;p++)m[p]=x[c[p]];u.push(m)}else for(f=0;f<a;f++){for(c=i[f],x=o[f],m=new Uint8Array(r),p=0;p<r;p++)l[p]&&(m[p]=x[c[p]]);u.push(m)}const d=new s.Z({width:t.width,height:t.height,pixels:u,mask:l,pixelType:"u8"});return d.updateStatistics(),d}function c(t,e){if(!n(t))return null;const i=t.clone(),{pixels:s}=i,l=i.width*i.height,r=e.length,a=Math.floor(r/2),o=e[Math.floor(a)],h=s[0];let f,p,u,c,x,m,d=!1;const g=new Uint8Array(l),y=new Uint8Array(l),w=new Uint8Array(l);let k=i.mask;const A=4===e[0].mappedColor.length;for(k||(k=new Uint8Array(l),k.fill(A?255:1),i.mask=k),x=0;x<l;x++)if(k[x]){for(f=h[x],d=!1,m=a,p=o,u=0,c=r-1;c-u>1;){if(f===p.value){d=!0;break}f>p.value?u=m:c=m,m=Math.floor((u+c)/2),p=e[Math.floor(m)]}d||(f===e[u].value?(p=e[u],d=!0):f===e[c].value?(p=e[c],d=!0):f<e[u].value?(d=!1,p=null):f>e[u].value&&(f<e[c].value?(p=e[u],d=!0):c===r-1?(d=!1,p=null):(p=e[c],d=!0))),d?(g[x]=p.mappedColor[0],y[x]=p.mappedColor[1],w[x]=p.mappedColor[2],k[x]=p.mappedColor[3]):g[x]=y[x]=w[x]=k[x]=0}return i.pixels=[g,y,w],i.mask=k,i.pixelType="u8",i.maskIsAlpha=A,i}function x(t,e,i,s,n,l,r,a){return{xmin:n<=i*t?0:n<i*t+t?n-i*t:t,ymin:l<=s*e?0:l<s*e+e?l-s*e:e,xmax:n+r<=i*t?0:n+r<i*t+t?n+r-i*t:t,ymax:l+a<=s*e?0:l+a<s*e+e?l+a-s*e:e}}function m(t,e){if(!t||0===t.length)return null;const i=t.filter((t=>t.pixelBlock))[0];if(!i)return null;const s=(i.extent.xmax-i.extent.xmin)/i.pixelBlock.width,n=(i.extent.ymax-i.extent.ymin)/i.pixelBlock.height,l=.01*Math.min(s,n),r=t.sort(((t,e)=>Math.abs(t.extent.ymax-e.extent.ymax)>l?e.extent.ymax-t.extent.ymax:Math.abs(t.extent.xmin-e.extent.xmin)>l?t.extent.xmin-e.extent.xmin:0)),a=Math.min.apply(null,r.map((t=>t.extent.xmin))),o=Math.min.apply(null,r.map((t=>t.extent.ymin))),h=Math.max.apply(null,r.map((t=>t.extent.xmax))),f=Math.max.apply(null,r.map((t=>t.extent.ymax))),p={x:Math.round((e.xmin-a)/s),y:Math.round((f-e.ymax)/n)},u={width:Math.round((h-a)/s),height:Math.round((f-o)/n)},c={width:Math.round((e.xmax-e.xmin)/s),height:Math.round((e.ymax-e.ymin)/n)};return Math.round(u.width/i.pixelBlock.width)*Math.round(u.height/i.pixelBlock.height)!==r.length||p.x<0||p.y<0||u.width<c.width||u.height<c.height?null:{extent:e,pixelBlock:d(r.map((t=>t.pixelBlock)),u,p,c)}}function d(t,e,i,l){const r=t.filter((t=>n(t)))[0];if(null==r)return null;const a=l?l.width:e.width,o=l?l.height:e.height,h=r.width,f=r.height,p=e.width/h,u=e.height/f,c=i?i.x:0,m=i?i.y:0,d=r.pixelType,g=s.Z.getPixelArrayConstructor(d),y=r.pixels.length,w=[];let k,A,M,b,v,C,U,B,T,P,_,F,S;for(C=0;C<y;C++){for(A=new g(a*o),U=0;U<u;U++)for(B=0;B<p;B++)if(M=t[U*p+B],M)for(k=M.pixels[C],_=x(h,f,B,U,c,m,a,o),T=_.ymin;T<_.ymax;T++)for(b=(U*f+T-m)*a+(B*h-c),v=T*h,P=_.xmin;P<_.xmax;P++)A[b+P]=k[v+P];w.push(A)}if(t.some((t=>null==t||t.mask&&t.mask.length>0)))for(F=new Uint8Array(a*o),U=0;U<u;U++)for(B=0;B<p;B++)if(M=t[U*p+B],S=M?M.mask:null,_=x(h,f,B,U,c,m,a,o),S)for(T=_.ymin;T<_.ymax;T++)for(b=(U*f+T-m)*a+(B*h-c),v=T*h,P=_.xmin;P<_.xmax;P++)F[b+P]=S[v+P];else if(M)for(T=_.ymin;T<_.ymax;T++)for(b=(U*f+T-m)*a+(B*h-c),v=T*h,P=_.xmin;P<_.xmax;P++)F[b+P]=1;else for(T=_.ymin;T<_.ymax;T++)for(b=(U*f+T-m)*a+(B*h-c),v=T*h,P=_.xmin;P<_.xmax;P++)F[b+P]=0;const G=new s.Z({width:a,height:o,pixels:w,pixelType:d,mask:F});return G.updateStatistics(),G}function g(t,e,i){if(!n(t))return null;const{width:s,height:l}=t,r=e.x,a=e.y,o=i.width+r,h=i.height+a;if(r<0||a<0||o>s||h>l)return t;if(0===r&&0===a&&o===s&&h===l)return t;t.mask||(t.mask=new Uint8Array(s*l));const f=t.mask;for(let t=0;t<l;t++){const e=t*s;for(let i=0;i<s;i++)f[e+i]=t<a||t>=h||i<r||i>=o?0:1}return t.updateStatistics(),t}function y(t){if(!n(t))return null;const e=t.clone(),{width:i,height:s,pixels:l,mask:r}=t,a=l[0],o=e.pixels[0];for(let t=2;t<s-1;t++){const e=new Map;for(let s=t-2;s<t+2;s++)for(let t=0;t<4;t++){const n=s*i+t;A(e,a[n],r?r[n]:1)}o[t*i]=w(e),o[t*i+1]=o[t*i+2]=o[t*i];let s=3;for(;s<i-1;s++){let n=(t-2)*i+s+1;A(e,a[n],r?r[n]:1),n=(t-1)*i+s+1,A(e,a[n],r?r[n]:1),n=t*i+s+1,A(e,a[n],r?r[n]:1),n=(t+1)*i+s+1,A(e,a[n],r?r[n]:1),n=(t-2)*i+s-3,k(e,a[n],r?r[n]:1),n=(t-1)*i+s-3,k(e,a[n],r?r[n]:1),n=t*i+s-3,k(e,a[n],r?r[n]:1),n=(t+1)*i+s-3,k(e,a[n],r?r[n]:1),o[t*i+s]=w(e)}o[t*i+s+1]=o[t*i+s]}for(let t=0;t<i;t++)o[t]=o[i+t]=o[2*i+t],o[(s-1)*i+t]=o[(s-2)*i+t];return e.updateStatistics(),e}function w(t){if(0===t.size)return 0;let e=0,i=-1,s=0;const n=t.keys();let l=n.next();for(;!l.done;)s=t.get(l.value),s>e&&(i=l.value,e=s),l=n.next();return i}function k(t,e,i){if(0===i)return;const s=t.get(e);1===s?t.delete(e):t.set(e,s-1)}function A(t,e,i){0!==i&&t.set(e,t.has(e)?t.get(e)+1:1)}function M(t,e,i){let{x:l,y:r}=e;const{width:a,height:o}=i;if(0===l&&0===r&&o===t.height&&a===t.width)return t;const{width:h,height:f}=t,p=Math.max(0,r),u=Math.max(0,l),c=Math.min(l+a,h),x=Math.min(r+o,f);if(c<0||x<0||!n(t))return null;l=Math.max(0,-l),r=Math.max(0,-r);const{pixels:m,mask:d}=t,g=a*o,y=m.length,w=[];for(let e=0;e<y;e++){const i=m[e],n=s.Z.createEmptyBand(t.pixelType,g);for(let t=p;t<x;t++){const e=t*h;let s=(t+r-p)*a+l;for(let t=u;t<c;t++)n[s++]=i[e+t]}w.push(n)}const k=new Uint8Array(g);for(let t=p;t<x;t++){const e=t*h;let i=(t+r-p)*a+l;for(let t=u;t<c;t++)k[i++]=d?d[e+t]:1}const A=new s.Z({width:i.width,height:i.height,pixelType:t.pixelType,pixels:w,mask:k});return A.updateStatistics(),A}function b(t,e=!0){if(!n(t))return null;const{pixels:i,width:l,height:r,mask:a,pixelType:o}=t,h=[],f=Math.round(l/2),p=Math.round(r/2),u=r-1,c=l-1;for(let t=0;t<i.length;t++){const n=i[t],a=s.Z.createEmptyBand(o,f*p);let x=0;for(let t=0;t<r;t+=2)for(let i=0;i<l;i+=2){const s=n[t*l+i];if(e){const e=i===c?s:n[t*l+i+1],r=t===u?s:n[t*l+i+l],o=i===c?r:t===u?e:n[t*l+i+l+1];a[x++]=(s+e+r+o)/4}else a[x++]=s}h.push(a)}let x=null;if(a){x=new Uint8Array(f*p);let t=0;for(let i=0;i<r;i+=2)for(let s=0;s<l;s+=2){const n=a[i*l+s];if(e){const e=s===c?n:a[i*l+s+1],r=i===u?n:a[i*l+s+l],o=s===c?r:i===u?e:a[i*l+s+l+1];x[t++]=n*e*r*o?1:0}else x[t++]=n}}return new s.Z({width:f,height:p,pixelType:o,pixels:h,mask:x})}function v(t,e,i){if(!n(t))return null;const{width:s,height:l}=e;let{width:r,height:a}=t;const o=new Map,h={x:0,y:0},f=null==i?1:1+i;let p=t;for(let t=0;t<f;t++){const i=Math.ceil(r/s),n=Math.ceil(a/l);for(let r=0;r<n;r++){h.y=r*l;for(let n=0;n<i;n++){h.x=n*s;const i=M(p,h,e);o.set(`${t}/${r}/${n}`,i)}}t<f-1&&(p=b(p)),r=Math.round(r/2),a=Math.round(a/2)}return o}function C(t,e,i,l,r="nearest"){if(!n(t))return null;"majority"===r&&(t=y(t));const{pixels:a,mask:o,pixelType:h}=t,f=t.width,p=t.height,u=s.Z.getPixelArrayConstructor(h),c=a.length,{width:x,height:m}=e,d=l.cols,g=l.rows,w=Math.ceil(x/d),k=Math.ceil(m/g);let A,M,b,v,C,U,B,T=!1;for(let t=0;t<i.length;t+=3)-1===i[t]&&-1===i[t+1]&&-1===i[t+2]&&(T=!0);const P=new Float32Array(x*m),_=new Float32Array(x*m);let F,S,G=0;const I="majority"===r?0:.5;for(let t=0;t<k;t++)for(let e=0;e<w;e++){A=12*(t*w+e),M=i[A],b=i[A+1],v=i[A+2],C=i[A+3],U=i[A+4],B=i[A+5];for(let i=0;i<g;i++){G=(t*g+i)*x+e*d,S=(i+.5)/g;for(let t=0;t<i;t++)F=(t+.5)/d,P[G+t]=Math.round((M*F+b*S+v)*f-I),_[G+t]=Math.round((C*F+U*S+B)*p-I)}A+=6,M=i[A],b=i[A+1],v=i[A+2],C=i[A+3],U=i[A+4],B=i[A+5];for(let i=0;i<g;i++){G=(t*g+i)*x+e*d,S=(i+.5)/g;for(let t=i;t<d;t++)F=(t+.5)/d,P[G+t]=Math.round((M*F+b*S+v)*f-I),_[G+t]=Math.round((C*F+U*S+B)*p-I)}}const R=(t,e)=>{for(let i=0;i<m;i++){A=i*x;for(let i=0;i<x;i++)P[A]<0||_[A]<0?t[A]=0:t[A]=e[P[A]+_[A]*f],A++}},V=[];let Z;for(let t=0;t<c;t++)Z=new u(x*m),R(Z,a[t]),V.push(Z);const O=new s.Z({width:x,height:m,pixelType:h,pixels:V});if(o)O.mask=new Uint8Array(x*m),R(O.mask,o);else if(T){O.mask=new Uint8Array(x*m);for(let t=0;t<x*m;t++)O.mask[t]=P[t]<0||_[t]<0?0:1}return O.updateStatistics(),O}}}]);
//# sourceMappingURL=4464.js.map